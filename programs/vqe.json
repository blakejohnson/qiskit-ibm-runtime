{
  "name": "vqe",
  "description": "Variational Quantum Eigensolver (VQE) to find the minimal eigenvalue of a Hamiltonian.",
  "max_execution_time": 18000,
  "spec": {
    "parameters": {
      "$schema": "https://json-schema.org/draft/2019-09/schema",
      "properties": {
        "ansatz": {
          "description": "A parameterized quantum circuit preparing the ansatz wavefunction for the VQE. It is assumed that all qubits are initially in the 0 state.",
          "type": "object"
        },
        "operator": {
          "description": "The Hamiltonian whose smallest eigenvalue we're trying to find. Should be PauliSumOp",
          "type": "object"
        },
        "optimizer": {
          "description": "The classical optimizer used in to update the parameters in each iteration. Can be either any of Qiskit's Optimizer classes. If a dictionary, only SPSA and QN-SPSA are supported and the dictionary must specify the name and options of the optimizer, e.g. ``{'name': 'SPSA', 'maxiter': 100}``.",
          "type": "object"
        },
        "initial_parameters": {
          "description": "Initial parameters of the ansatz. Can be an array or the string ``'random'`` to choose random initial parameters.",
          "type": [
            "array",
            "string"
          ]
        },
        "aux_operators": {
          "description": "A list or dict (with strings as keys) of operators of type PauliSumOp to be evaluated at the final, optimized state.",
          "type": "array"
        },
        "shots": {
          "description": "The number of shots used for each circuit evaluation. Defaults to 1024.",
          "type": "integer",
          "default": 1024
        },
        "measurement_error_mitigation": {
          "description": "Whether to apply measurement error mitigation in form of a complete measurement fitter to the measurements. Defaults to False.",
          "type": "boolean",
          "default": false
        },
        "initial_layout": {
          "description": "Initial position of virtual qubits on the physical qubits of the quantum device. Default is None.",
          "type": [
            "null",
            "array",
            "object"
          ],
          "default": "null"
        },
        "max_evals_grouped": {
           "description": "The maximum number of parameter sets that can be evaluated at once. Defaults to the minimum of 2 times the number of parameters, or 1000.",
           "type": "integer",
           "default": "null"
        }
      },
      "required": [
        "ansatz",
        "operator",
        "optimizer",
        "initial_parameters"
      ]
    },
    "return_values": {
      "$schema": "https://json-schema.org/draft/2019-09/schema",
      "properties": {
        "optimizer_evals": {
          "description": "The number of steps of the optimizer.",
          "type": "integer"
        },
        "optimizer_time": {
          "description": "The total time taken by the optimizer. This is a float.",
          "type": "number"
        },
        "optimal_value": {
          "description": "The smallest value found during the optimization. Equal to the ``eigenvalue`` attribute. This is a float.",
          "type": "number"
        },
        "optimal_point": {
          "description": "The optimal parameter values found during the optimization. This is a numpy array.",
          "type": "array"
        },
        "optimal_parameters": {
          "description": "Not supported at the moment, therefore ``None``.",
          "type": "null"
        },
        "cost_function_evals": {
          "description": "The number of cost function (energy) evaluations.",
          "type": "integer"
        },
        "eigenstate": {
          "description": "The square root of sampling probabilities for each computational basis state of the circuit with optimal parameters.",
          "type": "object"
        },
        "eigenvalue": {
          "description": "The estimated eigenvalue. This is a complex number.",
          "type": "array"
        },
        "aux_operator_eigenvalues": {
          "description": "The expectation values of the auxiliary operators at the optimal state. This is a numpy array.",
          "type": "array"
        },
        "optimizer_history": {
          "description": "A dictionary containing information about the function evaluations (not necessarily the actual parameter value!): the current evaluation count, the parameters, the energy and the standard deviation.",
          "type": "object"
        }
      }
    }
  },
  "tags": ["prototype"]
}
