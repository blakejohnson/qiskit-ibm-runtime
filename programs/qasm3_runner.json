{
  "name": "qasm3-runner",
  "description": "A runtime program that takes one or more circuits, converts them to OpenQASM3, compiles them, executes them, and optionally applies measurement error mitigation. This program can also take and execute one or more OpenQASM3 strings. Note that this program can only run on a backend that supports OpenQASM3.",
  "max_execution_time": 14400,
  "spec": {
    "backend_requirements": {
      "input_allowed": "qasm3"
    },
    "parameters": {
      "$schema": "https://json-schema.org/draft/2019-09/schema",
      "properties": {
        "circuits": {
          "type": [
            "object",
            "array",
            "string"
          ],
          "description": "A circuit/OpenQASM3 string or a list of circuits/OpenQASM3 strings (real backend only)."
        },
        "transpiler_config": {
          "description": "Compilation options.",
          "type": "object"
        },
        "exporter_config": {
          "description": "Options to use when converting circuits to QASM3 strings, if applicable. 'disable_constants' is set to True by default.",
          "type": "object"
        },
        "run_config": {
          "description": "Execution time options. QSAM3 simulator supports 'shots', and real backends support both 'shots' and 'rep_delay'.",
          "type": "object"
        },
        "qasm3_args": {
          "description": "Input arguments to the OpenQASM3 program. Only supported when running on a simulator.",
          "type": [
            "object",
            "array"
          ]
        },
        "skip_transpilation": {
          "description": "Skip circuit transpilation.",
          "type": "boolean",
          "default": false
        },
        "use_measurement_mitigation": {
          "description": "Whether to apply measurement error mitigation. Currently, error mitigation only applies to QuantumCircuit.",
          "type": "boolean",
          "default": false
        },
        "merge_circuits": {
          "description": "Whether to merge multiple QuantumCircuits into one single QuantumCircuit containing each individual circuit separated by an initialization circuit. This will greatly improve the performance of your runtime program and should almost always be used. The default initialization circuit is a series of qubit resets (the number of which may be configured with \"init_num_resets\" ) on qubits used in your experiment followed by a relaxation delay (Which may be specified with \"init_delay\". You may also provide your own initialization circuit through \"init_circuit\".",
          "type": "boolean",
          "default": true
        },
        "init_num_resets": {
          "description": "The number of qubit resets to insert before each circuit execution.",
          "type": "int",
          "default": 3
        },
        "init_delay": {
          "description": "The number of microseconds of delay to insert before each circuit execution.",
          "type": "int",
          "default": 0
        },
        "init_circuit": {
          "description": "A quantum circuit to execute for initializing qubits before each circuit. If specified, parameters \"init_num_resets\" and \"init_delay\" are ignored.",
          "type": [
            "object"
          ]
        }
      },
      "required": [
        "circuits"
      ]
    },
    "return_values": {
      "$schema": "https://json-schema.org/draft/2019-09/schema",
      "description": "Execution results. A RunnerResult object is returned if a real backend is used. Otherwise a list of per-shot result is returned for each circuit.",
      "type": [
        "object",
        "array"
      ]
    }
  }
}
